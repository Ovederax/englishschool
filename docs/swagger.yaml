swagger: "2.0"
info:
  version: "1.0.0"
  title: "Swagger Petstore"
basePath: "/v2"
tags:
  - name: "user"
    description: "Operations about user"
  - name: "course"
    description: "Access to CRUD course"
  - name: "lesson"
    description: "Access to CRUD lesson in course"
  - name: "category"
    description: "Access to lesson by category in course"

schemes:
  - "https"
  - "http"
paths:
  /user/client:
    post:
      tags:
        - "user"
      summary: "Create new Client and login"
      operationId: "createClient"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/CreateUserRequst"
      responses:
        default:
          description: "successful operation"
  /user/tutor:
    post:
      tags:
        - "user"
      summary: "Create new Tutor and login"
      description: "This can only be done by the logged in user."
      operationId: "createTutor"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/SucessResponse"

  /user/login:
    get:
      tags:
        - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "query"
          description: "The user name for login"
          required: true
          type: "string"
        - name: "password"
          in: "query"
          description: "The password for login in clear text"
          required: true
          type: "string"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/SucessResponse"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
        - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
        - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"

  /course:
    post:
      tags:
        - "course"
      summary: "Add a new course"
      description: ""
      operationId: "addcourse"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "course object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Course"
      responses:
        "405":
          description: "Invalid input"
  /course/findByName:
    get:
      tags:
        - "course"
      summary: "Finds course by name"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findCourseByName"
      produces:
        - "application/json"
      parameters:
        - name: "status"
          in: "query"
          description: "Status values that need to be considered for filter"
          required: true
          type: "array"
          items:
            type: "string"
            enum:
              - "available"
              - "pending"
              - "sold"
            default: "available"
          collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Course"
        "400":
          description: "Invalid status value"
  /course/{id}:
    get:
      tags:
        - "course"
      summary: "Find course by ID"
      description: "Returns a single pet"
      operationId: "getCourceById"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of pet to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Course"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"

    put:
      tags:
        - "course"
      summary: "Updates a course"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of pet that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "name"
          in: "formData"
          description: "Updated name of the pet"
          required: false
          type: "string"
        - name: "status"
          in: "formData"
          description: "Updated status of the pet"
          required: false
          type: "string"
      responses:
        "405":
          description: "Invalid input"

    delete:
      tags:
        - "course"
      summary: "Deletes a course"
      description: ""
      operationId: "deletePet"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "id"
          in: "path"
          description: ""
          required: true
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"


  /category:
    post:
      tags:
        - "category"
      summary: "Add a new category"
      description: ""
      operationId: "addCategory"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "category object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Course"
      responses:
        "405":
          description: "Invalid input"

  /category/{id}:
    get:
      tags:
        - "category"
      summary: "Find category by ID"
      description: "Returns a single category"
      operationId: "getCategoryById"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of category to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Course"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Category not found"

    put:
      tags:
        - "category"
      summary: "Updates a category"
      description: ""
      operationId: "updateCategory"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of lesson that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "name"
          in: "formData"
          description: "Updated name of the lesson"
          required: false
          type: "string"
        - name: "status"
          in: "formData"
          description: "Updated status of the pet"
          required: false
          type: "string"
      responses:
        "405":
          description: "Invalid input"

    delete:
      tags:
        - "category"
      summary: "Deletes a lesson"
      description: ""
      operationId: "deleteCategory"
      produces:
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "id"
          in: "path"
          description: ""
          required: true
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Lesson not found"


  /lesson:
    post:
      tags:
        - "lesson"
      summary: "Add a new lesson"
      description: ""
      operationId: "addLesson"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "course object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Course"
      responses:
        "405":
          description: "Invalid input"
  /lesson/{id}:
    get:
      tags:
        - "lesson"
      summary: "Find lesson by ID"
      description: "Returns a single lesson"
      operationId: "getLessonById"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of lesson to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Course"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Lesson not found"

    put:
      tags:
        - "lesson"
      summary: "Updates a lesson"
      description: ""
      operationId: "updateLesson"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of lesson that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "name"
          in: "formData"
          description: "Updated name of the lesson"
          required: false
          type: "string"
        - name: "status"
          in: "formData"
          description: "Updated status of the pet"
          required: false
          type: "string"
      responses:
        "405":
          description: "Invalid input"

    delete:
      tags:
        - "lesson"
      summary: "Deletes a lesson"
      description: ""
      operationId: "deleteLesson"
      produces:
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "id"
          in: "path"
          description: ""
          required: true
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Lesson not found"

definitions:
  MapItem:
    type: "object"
    properties:
      key:
        type: "string"
      value:
        type: "string"
  Person:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      filename:
        type: "string"
      lastname:
        type: "string"
      email:
        type: "string"
      otherContacts:
        type: "array"
        items:
          $ref: "#/definitions/MapItem"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "integer"
        format: "int64"
      description:
        type: "integer"
        format: "int64"

  Course:
    type: "object"
    required:
      - "name"
      - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
          - "available"
          - "pending"
          - "sold"
    xml:
      name: "Pet"

  Lesson:
    type: "object"
    required:
      - "name"
      - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      order:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      title:
        type: "string"
        example: "doggie"
      content:
        type: "string"
        example: "Lorem ipsum dolor"
      materials:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Material"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
          - "available"
          - "pending"
          - "sold"
    xml:
      name: "Pet"

  Material:
    type: "object"
    required:
      - "name"
      - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      order:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      title:
        type: "string"
        example: "doggie"
      content:
        type: "string"
        example: "Lorem ipsum dolor"
      materials:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Material"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
          - "available"
          - "pending"
          - "sold"
    xml:
      name: "Pet"


  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      login:
        type: "string"
      password:
        type: "string"
      firstname:
        type: "string"
      lastname:
        type: "string"
      email:
        type: "string"
      otherContacts:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/MapItem"
    xml:
      name: "User"


  CreateUserRequst:
    type: "object"
    required:
      - "login"
      - "password"
      - "firstname"
      - "lastname"
      - "email"
    properties:
      code:
        type: "integer"
      login:
        type: "string"
      password:
        type: "string"
      firstname:
        type: "string"
      lastname:
        type: "string"
      email:
        type: "string"
      otherContacts:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/MapItem"






  SucessResponse:
    type: "object"
    properties:
      code:
        type: "integer"
  BadResponse:
    type: "object"
    properties:
      code:
        type: "string"